# Dockerfile for functional testing of `auto-click-auto`

ARG PYTHON_VERSION=3.10

# Base test image to re-use for each test
FROM python:${PYTHON_VERSION}-slim-buster as base_test_env

RUN apt-get update && apt-get install -y vim zsh fish
COPY . /opt/auto-click-auto/
WORKDIR /opt/auto-click-auto

RUN pip install .

# Test adding autocompletion for bash and fish
FROM base_test_env as test_example_1
RUN echo "Current login shell is $SHELL" \
    && touch ~/.zshrc \
    && echo "John Doe" | python3 examples/example_1.py \
    # Check that configuration has been added for bash
    && grep 'command -v example-1 > /dev/null 2>&1 && eval "\$(_EXAMPLE_1_COMPLETE=bash_source example-1)"' ~/.bashrc \
    && echo "~/.bashrc file is correct..." \
    # Check that configuration has been added for fish
    && grep 'command -v example-1 > /dev/null 2>&1 && _EXAMPLE_1_COMPLETE=fish_source example-1 | source' ~/.config/fish/completions/example-1.fish \
    && echo "fish config file is correct..." \
    # Check that no configuration has been added for zsh
    && ! grep -q 'command -v example-1 > /dev/null 2>&1 && eval "\$(_EXAMPLE_1_COMPLETE=zsh_source example-1)"' ~/.zshrc || { echo "Completion should not haven be added"; exit 1; }

# Test adding autocompletion with default option and autodetect with bash
FROM base_test_env as test_example_2_bash
RUN echo "Current login shell is $SHELL" \
    && touch ~/.zshrc \
    # We need to export the env variable otherwise we can't get it with
    # Python's `os.environ["SHELL"]`.
    && export SHELL=/bin/bash \
    # Check that configuration has been added for bash
    && cp tests/functional/config_files/.bashrc-test-old ~/.bashrc \
    && python3 examples/example_2.py --autocomplete \
    && grep 'command -v example-2 > /dev/null 2>&1 && eval "\$(_EXAMPLE_2_COMPLETE=bash_source example-2)"' ~/.bashrc \
    && diff ~/.bashrc tests/functional/config_files/.bashrc-test-new \
    && echo "~/.bashrc file is correct..." \
    # Check that no configuration has been added for zsh
    && ! grep -q 'command -v example-2 > /dev/null 2>&1 && eval "\$(_EXAMPLE_2_COMPLETE=zsh_source example-2)"' ~/.zshrc || { echo "Completion should not haven be added"; exit 1; } \
    # Check that no configuration has been added for fish
    && if [ -e "~/.config/fish/completions/example-2.fish" ]; then echo "File should not exist"; exit 1; fi

# Test adding autocompletion with default option and autodetect with zsh
FROM base_test_env as test_example_2_zsh
RUN echo "Current login shell is $SHELL" \
    && touch ~/.zshrc \
    # We need to export the env variable otherwise we can't get it with
    # Python's `os.environ["SHELL"]`.
    && export SHELL=/bin/zsh \
    # Check that configuration has been added for zsh
    && cp tests/functional/config_files/.zshrc-test-old ~/.zshrc \
    && python3 examples/example_2.py --autocomplete \
    && grep 'command -v example-2 > /dev/null 2>&1 && eval "\$(_EXAMPLE_2_COMPLETE=zsh_source example-2)"' ~/.zshrc \
    && diff ~/.zshrc tests/functional/config_files/.zshrc-test-new \
    && echo "~/.zshrc file is correct..." \
    # Check that no configuration has been added for bash
    && ! grep -q 'command -v example-2 > /dev/null 2>&1 && eval "\$(_EXAMPLE_2_COMPLETE=bash_source example-2)"' ~/.bashrc || { echo "Completion should not haven be added"; exit 1; } \
    # Check that no configuration has been added for fish
    && if [ -e "~/.config/fish/completions/example-2.fish" ]; then echo "File should not exist"; exit 1; fi

# Test adding autocompletion with default option and autodetect with fish
FROM base_test_env as test_example_2_fish
RUN echo "Current login shell is $SHELL" \
    && touch ~/.zshrc \
    && mkdir -p ~/.config/fish/completions/ \
    # We need to export the env variable otherwise we can't get it with
    # Python's `os.environ["SHELL"]`.
    && export SHELL=/usr/bin/fish \
    # Check that configuration has been added for fish
    && cp tests/functional/config_files/.fish-test-old ~/.config/fish/completions/example-2.fish \
    && python3 examples/example_2.py --autocomplete \
    && diff ~/.config/fish/completions/example-2.fish tests/functional/config_files/.fish-test-new \
    && grep 'command -v example-2 > /dev/null 2>&1 && _EXAMPLE_2_COMPLETE=fish_source example-2 | source' ~/.config/fish/completions/example-2.fish \
    && echo "fish config file is correct..." \
    # Check that no configuration has been added for bash
    && ! grep -q 'command -v example-2 > /dev/null 2>&1 && eval "\$(_EXAMPLE_2_COMPLETE=bash_source example-2)"' ~/.bashrc || { echo "Completion should not haven be added"; exit 1; } \
    # Check that no configuration has been added for zsh
    && ! grep -q 'command -v example-2 > /dev/null 2>&1 && eval "\$(_EXAMPLE_2_COMPLETE=zsh_source example-2)"' ~/.zshrc || { echo "Completion should not haven be added"; exit 1; }

# Test adding autocompletion for bash, zsh, fish
FROM base_test_env as test_example_3
RUN echo "Current login shell is $SHELL" \
    && touch ~/.zshrc \
    && python3 examples/example_3.py config shell-completion \
    # Check that configuration has been added for bash
    && grep 'command -v example-3 > /dev/null 2>&1 && eval "\$(_EXAMPLE_3_COMPLETE=bash_source example-3)"' ~/.bashrc \
    && echo "~/.bashrc file is correct..." \
    # Check that configuration has been added for zsh
    && grep 'command -v example-3 > /dev/null 2>&1 && eval "\$(_EXAMPLE_3_COMPLETE=zsh_source example-3)"' ~/.zshrc \
    && echo "~/.zshrc file is correct..." \
    # Check that configuration has been added for fish
    && grep 'command -v example-3 > /dev/null 2>&1 && _EXAMPLE_3_COMPLETE=fish_source example-3 | source' ~/.config/fish/completions/example-3.fish \
    && echo "fish config file is correct..."   
